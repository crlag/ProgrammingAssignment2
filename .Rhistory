getwd()
dir()
add2 <- function(x,y){
x + y
}
add2(3,5)
above <- function(x,n){
use <- x > n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n = 10){
use <- x > n
x[use]
}
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means <- mean(y[,i])
}
means
}
mean
x = c(2,3)
mean
rm(list = ls())
makeVector <- function(x = numeric()){
# Sets the mean to null
m <- NULL
# Defines function to set the value of the vector
# Set the value of the variable 'y' to  'x'. Doesn't compute the mean of 'x'
set <- function(y){
x <<- y
m <<- NULL
}
# Defines the function to get the value
# The function only contains a line retrieving the variable 'x'
get <- function() x
# Defines the function that computes the mean value of the vector
# The function gets as attribute the R function 'mean'
setmean <- function(mean) m <<- mean
# Gets the mean in 'm'
getmean <- function() m
## Creates the special vector (list)
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...){
# Retrieve the mean value from the object 'x'
m <- x$getmean()
# Tests if the mean value has already been computed
if(!is.null(m)){
# If so, then it disolays a message saying that it is retrieving it from cache,
# and then resturs the value 'm'
message("getting cached data")
return(m)
}
# Otherwise, it computes the mean value and set it to the object 'x'
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m # Prints the mean value
}
makevector
makeVector
y = 1:20
makeVector(x)
makeVector
makeVector(y)
rm(y
rm(y)
y = 1:20
xx <- makeVector
xx <- makeVector()
cachemean(xx)
?mean
xx$get
a <- xx$get
rm(a)
rm(xx)
a <- x$get
xx <- makeVector()
a <- x$get
a <- xx$get
a <- xx$get()
xx <- makeVector(y)
a <- xx$get()
a
xy <- makeVector()
xy$set(y)
xy$get()
rm(list = ls())
xx <- makeVector()
makeVector <- function(x = numeric()){
# Sets the mean to null
m <- NULL
# Defines function to set the value of the vector
# Set the value of the variable 'y' to  'x'. Doesn't compute the mean of 'x'
set <- function(y){
x <<- y
m <<- NULL
}
# Defines the function to get the value
# The function only contains a line retrieving the variable 'x'
get <- function() x
# Defines the function that computes the mean value of the vector
# The function gets as attribute the R function 'mean'
setmean <- function(mean) m <<- mean
# Gets the mean in 'm'
getmean <- function() m
## Creates the special vector (list)
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...){
# Retrieve the mean value from the object 'x'
m <- x$getmean()
# Tests if the mean value has already been computed
if(!is.null(m)){
# If so, then it disolays a message saying that it is retrieving it from cache,
# and then resturs the value 'm'
message("getting cached data")
return(m)
}
# Otherwise, it computes the mean value and set it to the object 'x'
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m # Prints the mean value
}
xx <- makeVector()
y = 1:100
xx$set(y)
xx$get()
cachemean(xx)
xx$getmean
xx$getmean()
rm(list = ls())
setwd("~/Documents/Cursos/R programming/Code/TestsFunctions")
makeCacheMatrix <- function(x = matrix()){
xinv <- NULL
set <- function(y){
x <<- y
xinv <<- NULL
}
get <- function() x
#setinv <- function(f = solve(x)) xinv <<- f
setinv <- function(x, f = solve) xinv <<- f(x)
getinv <- function() xinv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x,...){
xinv <- x$getinv()
if(!is.null(xinv)){
return(xinv)
}
data <- x$get()
xinv <- solve(x)
x$setinv(xinv)
xinv
}
s <- rnorm(16)
s
y <- matrix(s,4,4)
m <- makeCacheMatrix(y)
m$get()
m$setinv(y)
m$getinv()
rm(list=ls())
cat("\014")
makeCacheMatrix <- function(x = matrix()){
xinv <- NULL
set <- function(y){
x <<- y
xinv <<- NULL
}
get <- function() x
setinv <- function(f = solve(x)) xinv <<- f
getinv <- function() xinv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x,...){
xinv <- x$getinv()
if(!is.null(xinv)){
return(xinv)
}
data <- x$get()
xinv <- solve(x)
x$setinv(xinv)
xinv
}
s <- rnorm(16)
y <- matrix(s,4,4)
m <- makeCacheMatrix()
m$set(y)
m$setinv()
m$get()
m$getinv()
m$setinv(y)
m$getinv()
rm(list = ls())
makeCacheMatrix <- function(x = matrix()){
xinv <- NULL
set <- function(y){
x <<- y
xinv <<- NULL
}
get <- function() x
setinv <- function(f = solve) xinv <<- f(x)
getinv <- function() xinv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x,...){
xinv <- x$getinv()
if(!is.null(xinv)){
return(xinv)
}
data <- x$get()
xinv <- solve(x)
x$setinv(xinv)
xinv
}
s <- rnorm(16)
y <- matrix(s,4,4)
m <- makeCacheMatrix()
m$getinv()
m$setinv()
m$getinv()
m$set(y)
m$getinv()
m$setinv()
m$getinv()
s <- rnorm(16)
y <- matrix(s,4,4)
m$set(y)
m$getinv
m$getinv()
m$setinv(y)
s <- rnorm(16)
y <- matrix(s,4,4)
m$set(y)
inv <- cacheSolve(m)
class(m)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()){
xinv <- NULL
set <- function(y){
x <<- y
xinv <<- NULL
}
get <- function() x
setinv <- function(f = solve) xinv <<- f(x)
getinv <- function() xinv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x,...){
xinv <- x$getinv()
if(!is.null(xinv)){
return(xinv)
}
data <- x$get()
xinv <- solve(data)
x$setinv(xinv)
xinv
}
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()){
xinv <- NULL
set <- function(y){
x <<- y
xinv <<- NULL
}
get <- function() x
setinv <- function(minv) xinv <<- minv
getinv <- function() xinv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x,...){
xinv <- x$getinv()
if(!is.null(xinv)){
return(xinv)
}
data <- x$get()
xinv <- solve(data)
x$setinv(xinv)
xinv
}
cacheSolve(m)
rm(list = ls())
cat("\014")
s <- rnorm(16)
y <- matrix(s,4,4)
m <- makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()){
xinv <- NULL
set <- function(y){
x <<- y
xinv <<- NULL
}
get <- function() x
setinv <- function(minv) xinv <<- minv
getinv <- function() xinv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x,...){
xinv <- x$getinv()
if(!is.null(xinv)){
return(xinv)
}
data <- x$get()
xinv <- solve(data)
x$setinv(xinv)
xinv
}
m <- makeCacheMatrix()
m <- makeCacheMatrix(y)
cacheSolve(m)
s <- rnorm(16)
y <- matrix(s,4,4)
m <- makeCacheMatrix(y)
cacheSolve(m)
m$get()
m$getinv()
a <- m$get()
b <- m$getinv()
a%*%b
rm(a,b)
rm(list = ls())
cat("\014")
setwd("~/Documents/Cursos/R programming/Code/ProgrammingAssignment2")
makeCacheMatrix <- function(x = matrix()){
xinv <- NULL
set <- function(y){
x <<- y
xinv <<- NULL
}
get <- function() x
setinv <- function(inv) xinv <<- inv
getinv <- function() xinv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
xinv <- x$getinv()
if(!is.null(xinv)){
return(xinv)
}
data <- x$get()
xinv <- solve(data)
x$setinv(xinv)
## Returns a matrix that is the inverse of 'x'
return(xinv)
}
s <- rnorm(25)
y <- matrix(5,5)
makeCacheMatrix(y)
m <- makeCacheMatrix(y)
cacheSolve(m)
y
s <- rnorm(25)
y <- matrix(s,5,5)
m <- makeCacheMatrix(y)
cacheSolve(m)
## Caching the inverse of a matrix
## This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()){
xinv <- NULL
set <- function(y){
x <<- y
xinv <<- NULL
}
get <- function() x
setinv <- function(inv) xinv <<- inv
getinv <- function() xinv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix".
## If the inverse has already been computed the function retrieve its value from the cache.
cacheSolve <- function(x, ...) {
xinv <- x$getinv()
if(!is.null(xinv)){
message("getting data from the cache")
return(xinv)
}
data <- x$get()
xinv <- solve(data)
x$setinv(xinv)
## Returns a matrix that is the inverse of 'x'
return(xinv)
}
cacheSolve(m)
m$getinv()
cacheSolve(m)
rm(list = ls())
## Caching the inverse of a matrix
## This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()){
xinv <- NULL
set <- function(y){
x <<- y
xinv <<- NULL
}
get <- function() x
setinv <- function(inv) xinv <<- inv
getinv <- function() xinv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix".
## If the inverse has already been computed the function retrieve its value from the cache.
cacheSolve <- function(x, ...) {
xinv <- x$getinv()
if(!is.null(xinv)){
message("getting data from the cache")
return(xinv)
}
data <- x$get()
xinv <- solve(data)
x$setinv(xinv)
## Returns a matrix that is the inverse of 'x'
return(xinv)
}
s <- rnorm(4)
y <- matrix(s,2,2)
m <- makeCacheMatrix()
m$set(y)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
s <- rnorm(4)
y <- matrix(s,2,2)
m$set(y)
cacheSolve(m)
rm(list = ls())
cat("\014")
